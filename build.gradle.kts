/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4/userguide/building_java_projects.html
 */

plugins {
    // Aplicar el plugin de Spring Boot
    id("org.springframework.boot") version "2.5.14"
    // Plugin para la gestión de dependencias
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    // Kotlin y soporte para Spring
    kotlin("jvm") version "1.6.21"
    kotlin("plugin.spring") version "1.6.21"
    // Para construir aplicaciones tipo CLI (Command Line Interface)
    application
}

group = "com.bci"
version = "1.0.0"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    // Usar Maven Central para resolver dependencias
    mavenCentral()
}

dependencies {
    // Dependencias de Spring Boot
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-test")

    // H2 Database (solo en ejecución local, por ejemplo)
    implementation("com.h2database:h2")
    // Spring Data JPA para soporte con bases de datos
    implementation("org.springframework.data:spring-data-jpa:2.7.0")
    implementation("org.springframework.data:spring-data-commons:2.7.0")

    // Lombok para reducir código repetitivo (getters/setters, etc)
    implementation("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok:1.18.22")

    // APIs de Java EE para la validación y persistencia
    implementation("javax.persistence:javax.persistence-api:2.2")
    implementation("javax.servlet:javax.servlet-api:4.0.1")
    implementation("javax.validation:validation-api:2.0.1.Final")

    // Hibernate: ORM para gestión de bases de datos
    implementation("org.hibernate:hibernate-core:5.6.14.Final")
    implementation("org.hibernate:hibernate-validator:6.0.13.Final")

    // Dependencia para trabajar con JWT (JSON Web Tokens)
    implementation("io.jsonwebtoken:jjwt:0.9.1")

    // Swagger para documentación de APIs
    implementation("io.swagger.core.v3:swagger-annotations:2.2.8")
    implementation("io.swagger.core.v3:swagger-models:2.2.8")

    // Dependencia de Guava (solo si la necesitas en tu proyecto)
    implementation("com.google.guava:guava:30.1.1-jre")

    // Dependencia para pruebas con JUnit Jupiter (JUnit 5)
    //testImplementation("org.junit.jupiter:junit-jupiter-api:5.8.1")
    //testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.1")
    //testImplementation("org.junit.platform:junit-platform-launcher:1.8.1")
    testImplementation("junit:junit:4.13.2")
    testImplementation("org.junit.vintage:junit-vintage-engine:5.8.1") // Para correr JUnit 4 con JUnit 5

    implementation("org.slf4j:slf4j-api:1.7.32")

    // Dependencias para tests de Spring Boot
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.named<Test>("test") {
    // Usar JUnit Platform para las pruebas
    useJUnitPlatform()
}

// Definir la clase principal para ejecutar la aplicación
application {
    mainClass.set("com.bci.usersapp.UsersappApplication")
}

tasks.withType<JavaCompile> {
    // Usar UTF-8 como la codificación de caracteres
    options.encoding = "UTF-8"
}

tasks.test {
    useJUnitPlatform()
}